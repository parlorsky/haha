from sklearn.datasets import fetch_openml 
 
# Fetching the 'students_scores' dataset from OpenML 
dataset = fetch_openml(name='students_scores', version=1) 
 
# Separating the features (X) and the target variable (y) 
X, y = dataset.data, dataset.target 
 
# Display basic information about the dataset 
X_info = { 
    "Number of Rows (Objects)": X.shape[0], 
    "Number of Columns (Features)": X.shape[1], 
    "Feature Statistics": X.describe(), 
    "Number of Classes (Target Variable)": y.nunique() 
} 
 
# Checking for missing values and non-numerical data 
missing_values = X_df.isnull().sum().sum() 
non_numerical_features = X_df.select_dtypes(include=['object']).columns.tolist() 
 
data_check = { 
    "Missing Values": missing_values, 
    "Non-Numerical Features": non_numerical_features 
} 
 
 from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score

# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_df, y_df, test_size=0.3, random_state=42)

# Training a logistic regression model
logistic_model = LogisticRegression(random_state=42)
logistic_model.fit(X_train, y_train.values.ravel())

# Predicting on the test set
y_pred_logistic = logistic_model.predict(X_test)

# Calculating accuracy and classification report
accuracy_logistic = accuracy_score(y_test, y_pred_logistic)
classification_report_logistic = classification_report(y_test, y_pred_logistic)

from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import make_pipeline
from sklearn.metrics import accuracy_score

# Function to train and evaluate polynomial models with different degrees
def train_evaluate_polynomial(degree):
    # Creating a polynomial model pipeline
    polynomial_model = make_pipeline(PolynomialFeatures(degree), LogisticRegression(random_state=42))
    
    # Training the model
    polynomial_model.fit(X_train, y_train.values.ravel())

    # Predicting on the test set
    y_pred_poly = polynomial_model.predict(X_test)

    # Calculating accuracy
    accuracy_poly = accuracy_score(y_test, y_pred_poly)
    return accuracy_poly

# Trying different degrees for the polynomial model
degrees = [1, 2, 3, 4, 5]
polynomial_accuracies = {degree: train_evaluate_polynomial(degree) for degree in degrees}


from sklearn.svm import SVC

# Function to train and evaluate SVM models with different kernels
def train_evaluate_svm(kernel):
    # Creating an SVM model with the specified kernel
    svm_model = SVC(kernel=kernel, random_state=42)
    
    # Training the model
    svm_model.fit(X_train, y_train.values.ravel())

    # Predicting on the test set
    y_pred_svm = svm_model.predict(X_test)

    # Calculating accuracy
    accuracy_svm = accuracy_score(y_test, y_pred_svm)
    return accuracy_svm

# Trying different kernels for the SVM model
kernels = ['linear', 'poly', 'rbf', 'sigmoid']
svm_accuracies = {kernel: train_evaluate_svm(kernel) for kernel in kernels}


from sklearn.linear_model import Perceptron
import time

# Training and evaluating the Perceptron model
start_time = time.time()
perceptron_model = Perceptron(random_state=42)
perceptron_model.fit(X_train, y_train.values.ravel())
end_time = time.time()

# Predicting on the test set
y_pred_perceptron = perceptron_model.predict(X_test)

# Calculating accuracy and training time
accuracy_perceptron = accuracy_score(y_test, y_pred_perceptron)
training_time_perceptron = end_time - start_time


# Preparing data for the final comparison table
# Note: Training time for logistic regression, polynomial, and SVM models are not measured in this setup.
# They are generally longer than for the Perceptron due to their complexity.

model_comparison = {
    "Model": ["Logistic Regression", "Polynomial (Degree 5)", "SVM (RBF Kernel)", "Perceptron"],
    "Accuracy": [accuracy_logistic, polynomial_accuracies[5], svm_accuracies['rbf'], accuracy_perceptron],"Training Time (Seconds)": ["N/A", "N/A", "N/A", training_time_perceptron]
}

comparison_df = pd.DataFrame(model_comparison)


import matplotlib.pyplot as plt
import seaborn as sns

# Visualization of the synthetic dataset
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Feature_1', y='Feature_2', hue=y_df['Target'], data=X_df, palette='Set1', style=y_df['Target'])
plt.title('Scatter Plot of Synthetic Dataset')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.legend(title='Target')
plt.show()


# Visualization of Logistic Regression Model Decision Boundary
import numpy as np

def plot_decision_boundary(X, y, model, title):
    # Setting min and max values and giving some padding
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    h = 0.01
    # Generating a grid of points with distance h between them
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
    # Predicting the function value for the whole gid
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)

    # Plotting the contour and training examples
    plt.contourf(xx, yy, Z, alpha=0.8, cmap='Set1')
    sns.scatterplot(x=X[:, 0], y=X[:, 1], hue=y, palette='Set1', style=y, legend=None)
    plt.xlim(xx.min(), xx.max())
    plt.ylim(yy.min(), yy.max())
    plt.title(title)
    plt.xlabel('Feature 1')
    plt.ylabel('Feature 2')

plt.figure(figsize=(10, 6))
plot_decision_boundary(X, y, logistic_model, "Logistic Regression Model Decision Boundary")
plt.show()


# Visualization for Polynomial Models with Different Degrees

plt.figure(figsize=(15, 12))

for i, degree in enumerate(degrees, 1):
    plt.subplot(2, 3, i)
    polynomial_model = make_pipeline(PolynomialFeatures(degree), LogisticRegression(random_state=42))
    polynomial_model.fit(X_train, y_train.values.ravel())
    plot_decision_boundary(X, y, polynomial_model, f"Polynomial (Degree {degree}) Decision Boundary")

plt.tight_layout()
plt.show()


# Visualization for Perceptron Model Decision Boundary

plt.figure(figsize=(10, 6))
plot_decision_boundary(X, y, perceptron_model, "Perceptron Model Decision Boundary")
plt.show()
